- name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-test.txt

      - name: Set up n8n test environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
          # Wait for n8n to be ready
          ./scripts/wait-for-n8n.sh

      - name: Test workflows
        run: |
          python test_workflows.py --all --format=github
        env:
          N8N_HOST: localhost
          N8N_PORT: 5678
          N8N_PROTOCOL: http
          N8N_API_KEY: ${{ secrets.N8N_API_KEY }}
          TEST_ENV: isolated

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: workflow-test-results
          path: |
            workflow_tests.log
            test-results.xml
        if: always()

  test-custom-nodes:
    name: Test Custom Nodes
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm install -g n8n-node-dev typescript ts-node

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-test.txt

      - name: Test custom nodes
        run: |
          python test_nodes.py --all --format=github
        env:
          NODE_DIR: ./custom-nodes

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: node-test-results
          path: node_tests.log
        if: always()

  scan-security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  notification:
    name: Notify on Results
    runs-on: ubuntu-latest
    needs: [test-workflows, test-custom-nodes, scan-security]
    if: always()
    steps:
      - name: Check workflow results
        uses: technote-space/workflow-conclusion-action@v3

      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ env.WORKFLOW_CONCLUSION }}
          fields: repo,message,commit,author,action,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
