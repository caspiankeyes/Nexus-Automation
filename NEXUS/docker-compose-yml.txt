version: '3.8'

services:
  n8n:
    image: nexus/n8n-ai:latest
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    ports:
      - "5678:5678"
    environment:
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - DB_TYPE=postgres
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD=${DB_POSTGRESDB_PASSWORD}
      - EXECUTIONS_MODE=queue
      - QUEUE_BULL_REDIS_HOST=redis
      - N8N_METRICS=true
      - N8N_DIAGNOSTICS=${N8N_DIAGNOSTICS:-false}
      - NODE_FUNCTION_ALLOW_EXTERNAL=${NODE_FUNCTION_ALLOW_EXTERNAL:-true}
      - N8N_TEMPLATES_HOST=${N8N_TEMPLATES_HOST:-https://api.n8n.io}
      - N8N_AI_ENABLED=${N8N_AI_ENABLED:-true}
      # AI service configurations
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LANGCHAIN_TRACING_V2=${LANGCHAIN_TRACING_V2:-false}
      - LANGCHAIN_API_KEY=${LANGCHAIN_API_KEY}
      # Additional configuration
      - N8N_LOG_LEVEL=${N8N_LOG_LEVEL:-info}
      - N8N_LOG_OUTPUT=${N8N_LOG_OUTPUT:-console}
      - WEBHOOK_URL=${WEBHOOK_URL:-http://localhost:5678/}
      - N8N_PUSH_BACKEND=${N8N_PUSH_BACKEND:-websocket}
    volumes:
      - n8n-data:/home/node/.n8n
      - ${PWD}/custom-nodes:/custom-nodes
      - ${PWD}/workflows:/home/node/.n8n/workflows
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
      
  postgres:
    image: postgres:15-alpine
    restart: always
    environment:
      - POSTGRES_USER=n8n
      - POSTGRES_PASSWORD=${DB_POSTGRESDB_PASSWORD}
      - POSTGRES_DB=n8n
      - POSTGRES_NON_ROOT_USER=n8n_user
      - POSTGRES_NON_ROOT_PASSWORD=${DB_POSTGRESDB_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ${PWD}/init-scripts/postgres:/docker-entrypoint-initdb.d
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U n8n"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  redis:
    image: redis:7-alpine
    restart: always
    volumes:
      - redis-data:/data
    networks:
      - n8n-network
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  prometheus:
    image: prom/prometheus:v2.44.0
    restart: always
    volumes:
      - ${PWD}/monitoring/prometheus/:/etc/prometheus/
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - n8n-network
    depends_on:
      - n8n
      
  grafana:
    image: grafana/grafana:9.5.2
    restart: always
    volumes:
      - ${PWD}/monitoring/grafana/provisioning/:/etc/grafana/provisioning/
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:%(http_port)s/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    ports:
      - "3000:3000"
    networks:
      - n8n-network
    depends_on:
      - prometheus

  nginx:
    image: nginx:1.25-alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ${PWD}/nginx/conf.d:/etc/nginx/conf.d
      - ${PWD}/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ${PWD}/nginx/ssl:/etc/nginx/ssl
      - ${PWD}/nginx/www:/var/www/html
    depends_on:
      - n8n
      - grafana
    networks:
      - n8n-network

volumes:
  n8n-data:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  n8n-network:
    driver: bridge
