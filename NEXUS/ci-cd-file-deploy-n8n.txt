name: Deploy n8n Environment

on:
  push:
    branches: [main]
    paths:
      - 'docker/**'
      - 'kubernetes/**'
      - '.env.example'
      - 'docker-compose.yml'
      - '.github/workflows/deploy_n8n.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}/nexus-n8n
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=branch
            type=sha,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: staging
    if: github.event_name == 'push' || github.event.inputs.environment == 'staging'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.25.6'

      - name: Set up kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Update Kubernetes manifests
        run: |
          # Update image tag in Kubernetes deployment
          sed -i "s|nexus/n8n-ai:latest|ghcr.io/${{ github.repository }}/nexus-n8n:sha-$(git rev-parse --short HEAD)|g" kubernetes/nexus-n8n-deployment.yaml
          
          # Update ConfigMap with environment-specific values
          envsubst < kubernetes/templates/configmap.template.yaml > kubernetes/nexus-n8n-configmap.yaml
        env:
          N8N_HOST: ${{ secrets.N8N_HOST_STAGING }}
          N8N_PROTOCOL: https
          N8N_PATH: /

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f kubernetes/namespace.yaml
          kubectl apply -f kubernetes/nexus-n8n-configmap.yaml
          kubectl apply -f kubernetes/nexus-n8n-secrets.yaml
          kubectl apply -f kubernetes/nexus-n8n-pvc.yaml
          kubectl apply -f kubernetes/nexus-n8n-deployment.yaml
          kubectl apply -f kubernetes/nexus-n8n-service.yaml
          kubectl apply -f kubernetes/nexus-n8n-ingress.yaml
          
          # Wait for deployment to complete
          kubectl rollout status deployment/nexus-n8n -n nexus-n8n --timeout=300s

      - name: Validate deployment
        run: |
          # Check if service is responding
          kubectl run curl --image=curlimages/curl:7.88.1 -n nexus-n8n --rm --restart=Never -i --timeout=120s -- \
            curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.N8N_HOST_STAGING }}/healthz

      - name: Send deployment notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,workflow
          text: 'Deployed to staging environment: https://${{ secrets.N8N_HOST_STAGING }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()

  deploy-to-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-to-staging]
    environment: production
    if: github.event.inputs.environment == 'production'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.25.6'

      - name: Set up kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Update Kubernetes manifests
        run: |
          # Update image tag in Kubernetes deployment
          sed -i "s|nexus/n8n-ai:latest|ghcr.io/${{ github.repository }}/nexus-n8n:sha-$(git rev-parse --short HEAD)|g" kubernetes/nexus-n8n-deployment.yaml
          
          # Update ConfigMap with environment-specific values
          envsubst < kubernetes/templates/configmap.template.yaml > kubernetes/nexus-n8n-configmap.yaml
        env:
          N8N_HOST: ${{ secrets.N8N_HOST_PRODUCTION }}
          N8N_PROTOCOL: https
          N8N_PATH: /

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f kubernetes/namespace.yaml
          kubectl apply -f kubernetes/nexus-n8n-configmap.yaml
          kubectl apply -f kubernetes/nexus-n8n-secrets.yaml
          kubectl apply -f kubernetes/nexus-n8n-pvc.yaml
          kubectl apply -f kubernetes/nexus-n8n-deployment.yaml
          kubectl apply -f kubernetes/nexus-n8n-service.yaml
          kubectl apply -f kubernetes/nexus-n8n-ingress.yaml
          
          # Wait for deployment to complete
          kubectl rollout status deployment/nexus-n8n -n nexus-n8n --timeout=300s

      - name: Validate deployment
        run: |
          # Check if service is responding
          kubectl run curl --image=curlimages/curl:7.88.1 -n nexus-n8n --rm --restart=Never -i --timeout=120s -- \
            curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.N8N_HOST_PRODUCTION }}/healthz

      - name: Send deployment notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,workflow
          text: 'ðŸš€ Deployed to production environment: https://${{ secrets.N8N_HOST_PRODUCTION }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
